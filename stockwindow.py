# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'stockwindow2.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from functools import partial
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from db_handler import *

class Ui_StockWindow(object):
    def __init__(self):
        self.row_count = 0
        self.checked_list = []
        self.store_list = []
        self.front_list = []
        self.is_checked = True
        self.method = 0 #Method to select flow in one_to_front
#        self.store_list = []
    def setupUi(self, StockWindow):
        self.StockWindow = StockWindow
        StockWindow.setObjectName("StockWindow")
        StockWindow.resize(1024, 720)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(StockWindow.sizePolicy().hasHeightForWidth())
        StockWindow.setSizePolicy(sizePolicy)
        StockWindow.setMinimumSize(QtCore.QSize(800, 600))
        #StockWindow.setMinimumSize(QtCore.QSize(0, 0))
        StockWindow.setFocusPolicy(QtCore.Qt.StrongFocus)
        StockWindow.setIconSize(QtCore.QSize(12, 12))
        self.centralwidget = QtWidgets.QWidget(StockWindow)
        self.centralwidget.setStyleSheet("background-color: rgba(251, 193, 193, 158)")
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setMinimumSize(QtCore.QSize(600, 0))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.tableWidget.setFont(font)
        self.tableWidget.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.tableWidget.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.tableWidget.setStyleSheet("background-color:rgb(238, 238, 236)")
        self.tableWidget.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.tableWidget.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(5)
        self.tableWidget.setRowCount(0)
        self.tableWidget.setStyleSheet("background-image: url(./imagenes/sophia_trans.png);\n"
"background-repeat: no-repeat;\n"
"background-position: center;\n"
"background-color:rgb(255, 255, 255)")
        self.tableWidget.horizontalHeader().setStyleSheet("background-color: rgb(255,255,255)")
        self.tableWidget.verticalHeader().setStyleSheet("background-image: url(./imagenes/headerv.png)")
        self.tableWidget.horizontalHeader().setSectionResizeMode(0,QHeaderView.Stretch)
        self.tableWidget.horizontalHeader().setSectionResizeMode(1,QHeaderView.Stretch)
        self.tableWidget.horizontalHeader().setSectionResizeMode(2,QHeaderView.Stretch)
        self.tableWidget.horizontalHeader().setSectionResizeMode(3,QHeaderView.Stretch)
        self.tableWidget.horizontalHeader().setSectionResizeMode(4,QHeaderView.Stretch)
        self.tableWidget.resizeColumnsToContents()
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(13)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(13)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(13)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(13)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(13)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(4, item)
        self.tableWidget.horizontalHeader().setDefaultSectionSize(252)
        self.tableWidget.verticalHeader().setDefaultSectionSize(30)
        self.verticalLayout_5.addWidget(self.tableWidget)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setMinimumSize(QtCore.QSize(0, 60))
        self.lineEdit.setStyleSheet("background-color:rgb(255,255,255)")
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout_5.addWidget(self.lineEdit)
        spacerItem = QtWidgets.QSpacerItem(13, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem)
        self.searchbutton = QtWidgets.QPushButton(self.centralwidget)
        self.searchbutton.setMinimumSize(QtCore.QSize(200, 60))
        self.searchbutton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.searchbutton.setStyleSheet("background-color:rgb(117, 80, 123)")
        self.searchbutton.setObjectName("searchbutton")
        self.horizontalLayout_5.addWidget(self.searchbutton)
        self.verticalLayout_5.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        spacerItem1 = QtWidgets.QSpacerItem(20, 1, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.horizontalLayout_6.addItem(spacerItem1)
        spacerItem2 = QtWidgets.QSpacerItem(20, 1, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.horizontalLayout_6.addItem(spacerItem2)
        self.verticalLayout_5.addLayout(self.horizontalLayout_6)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem3)
        self.one_to_storage = QtWidgets.QPushButton(self.centralwidget)
        self.one_to_storage.setMinimumSize(QtCore.QSize(231, 71))
        self.one_to_storage.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.one_to_storage.setStyleSheet("background-color:rgb(117, 80, 123)")
        self.one_to_storage.setIconSize(QtCore.QSize(50, 16))
        self.one_to_storage.setObjectName("one_to_storage")
        self.horizontalLayout.addWidget(self.one_to_storage)
        spacerItem4 = QtWidgets.QSpacerItem(21, 68, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem4)
        self.n_increase_stock = QtWidgets.QSpinBox(self.centralwidget)
        self.n_increase_stock.setMinimumSize(QtCore.QSize(0, 40))
        self.n_increase_stock.setMinimum(1)
        self.n_increase_stock.setStyleSheet("background-color:rgba(173, 127, 168, 191)")
        self.n_increase_stock.setObjectName("n_increase_stock")
        self.horizontalLayout.addWidget(self.n_increase_stock)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.increase_stock = QtWidgets.QPushButton(self.centralwidget)
        self.increase_stock.setMinimumSize(QtCore.QSize(0, 40))
        self.increase_stock.setStyleSheet("background-color:rgb(117, 80, 123)")
        self.increase_stock.setObjectName("increase_stock")
        self.verticalLayout_3.addWidget(self.increase_stock)
        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setStyleSheet("QCheckBox::indicator:checked:pressed"
                                        "{"
                                        "background-color :rgba(255, 255, 255, 0)"
                                        "}")
        self.checkBox.setStyleSheet("background-color: rgba(251, 193, 193, 150)")  
        self.checkBox.setObjectName("checkBox")
        self.verticalLayout_3.addWidget(self.checkBox)
        self.horizontalLayout.addLayout(self.verticalLayout_3)
        spacerItem5 = QtWidgets.QSpacerItem(22, 68, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem5)
        self.one_to_front = QtWidgets.QPushButton(self.centralwidget)
        self.one_to_front.setMinimumSize(QtCore.QSize(231, 71))
        self.one_to_front.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.one_to_front.setStyleSheet("background-color:rgb(117, 80, 123)")
        self.one_to_front.setObjectName("one_to_front")
        self.horizontalLayout.addWidget(self.one_to_front)
        spacerItem6 = QtWidgets.QSpacerItem(22, 68, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem6)
        self.verticalLayout_5.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem7)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.n_to_storage_num = QtWidgets.QSpinBox(self.centralwidget)
        self.n_to_storage_num.setMinimum(1)
        self.n_to_storage_num.setMinimumSize(QtCore.QSize(236, 0))
        self.n_to_storage_num.setStyleSheet("background-color:rgba(173, 127, 168, 191)")
        self.n_to_storage_num.setObjectName("n_to_storage_num")
        self.verticalLayout.addWidget(self.n_to_storage_num)
        self.horizontalLayout_2.addLayout(self.verticalLayout)
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem8)
        self.n_decrease_stock = QtWidgets.QSpinBox(self.centralwidget)
        self.n_decrease_stock.setMinimum(1)
        self.n_decrease_stock.setMinimumSize(QtCore.QSize(0, 40))
        self.n_decrease_stock.setStyleSheet("background-color:rgba(173, 127, 168, 191)")
        self.n_decrease_stock.setObjectName("n_decrease_stock")
        self.horizontalLayout_2.addWidget(self.n_decrease_stock)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.Decrease_stock = QtWidgets.QPushButton(self.centralwidget)
        self.Decrease_stock.setMinimumSize(QtCore.QSize(0, 40))
        self.Decrease_stock.setStyleSheet("background-color:rgb(117, 80, 123)")
        self.Decrease_stock.setObjectName("Decrease_stock")
        self.verticalLayout_4.addWidget(self.Decrease_stock)
        self.checkBox_2 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_2.setStyleSheet("background-color: rgba(251, 193, 193, 158)")
        self.checkBox_2.setObjectName("checkBox_2")
        self.verticalLayout_4.addWidget(self.checkBox_2)
        self.horizontalLayout_2.addLayout(self.verticalLayout_4)
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem9)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.n_to_front_num = QtWidgets.QSpinBox(self.centralwidget)
        self.n_to_front_num.setMinimum(1)
        self.n_to_front_num.setMinimumSize(QtCore.QSize(236, 25))
        self.n_to_front_num.setStyleSheet("background-color:rgba(173, 127, 168, 191)")
        self.n_to_front_num.setObjectName("n_to_front_num")
        self.verticalLayout_2.addWidget(self.n_to_front_num)
        self.horizontalLayout_2.addLayout(self.verticalLayout_2)
        spacerItem10 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem10)
        self.verticalLayout_5.addLayout(self.horizontalLayout_2)
        spacerItem11 = QtWidgets.QSpacerItem(20, 13, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_5.addItem(spacerItem11)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        spacerItem12 = QtWidgets.QSpacerItem(388, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem12)
        self.close_stock_window = QtWidgets.QPushButton(self.centralwidget)
        self.close_stock_window.setMinimumSize(QtCore.QSize(200, 50))
        self.close_stock_window.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.close_stock_window.setStyleSheet("background-color:rgb(117, 80, 123)")
        self.close_stock_window.setObjectName("close_stock_window")
        self.horizontalLayout_4.addWidget(self.close_stock_window)
        spacerItem13 = QtWidgets.QSpacerItem(398, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem13)
        self.verticalLayout_5.addLayout(self.horizontalLayout_4)
        self.verticalLayout_6.addLayout(self.verticalLayout_5)
        StockWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(StockWindow)
        QtCore.QMetaObject.connectSlotsByName(StockWindow)

        # Activation close_stock_window
        self.close_stock_window.clicked.connect(self.close_stock_window_clicked)

        #Activation for searchbutton. Search products.
        self.searchbutton.clicked.connect(self.searchbutton_clicked)

        #Activation for increase_stock and decrease_stock
        self.increase_stock.clicked.connect(self.increase_stock_clicked)
        self.Decrease_stock.clicked.connect(self.decrease_stock_clicked)

        #Activation for move stocke from store to storage, and viceversa
        self.one_to_storage.clicked.connect(partial(self.one_to_storage_clicked,self.method))
        self.one_to_front.clicked.connect(partial(self.one_to_storage_clicked,self.method+1))



    #Clean lists for next search
    def clean_lists(self):
        self.checked_list = []
        self.store_list = []
        self.front_list = []

    #Method 0 = to storage
    #Method 1 = to front
    def ischecked(self):
        method = 0
        if(self.checkBox.isChecked() or self.checkBox_2.isChecked()):
            print(self.front_list)
            list_selected = self.front_list
            method = 1
        else:
            print(self.store_list)
            list_selected = self.store_list
        return(method,list_selected)


    def select_list_and_Qspin_value(self,method):
        if method == 0:
            selected_to_check = self.front_list
            selected_to_iterate = self.store_list
            value = self.n_to_storage_num.value()
        else:
            selected_to_check = self.store_list
            selected_to_iterate = self.front_list
            value = self.n_to_front_num.value()
        return(selected_to_iterate,selected_to_check,value)


    #Close window
    def close_stock_window_clicked(self):
        self.StockWindow.close()


    #Send product from shop to storage
    def one_to_storage_clicked(self,method_for_modify_stock):
        i = 0
        method_for_store = 0
        method_for_shop = 1
        #Not letting other buttons make searchs when pressed
        if self.row_count == 0:
            return(0)
        #value = self.n_to_storage_num.value()
        self.get_checked_products()
        iterate_list, check_list, value = self.select_list_and_Qspin_value(method_for_modify_stock)
        print("iterate list is {}".format(iterate_list))
        print("check list is {}".format(check_list)) 
        for item in iterate_list:
            #Si no hay stock en el negocio no se puede subir al deposito.
            if check_list[i] != 0:
                update_stored = value + item 
                update_shop = check_list[i] - value
                #Si cantidad sacar > cantidad existente, se pasa cantidad existente. 
                if update_shop < 0:
                    update_shop = 0
                    update_stored = check_list[i] + item
                if method_for_modify_stock == 0:
                    change_stock(str(update_stored),self.checked_list[i],method_for_store)
                    change_stock(str(update_shop),self.checked_list[i],method_for_shop)
                else:
                    change_stock(str(update_stored),self.checked_list[i],method_for_shop)
                    change_stock(str(update_shop),self.checked_list[i],method_for_store)

            i = i+1
        self.searchbutton_clicked()
        self.clean_lists()

    #Increase stock, depending on QSpingBox.
    def increase_stock_clicked(self):
        if self.row_count == 0:
            return(0)
        i = 0
        value = self.n_increase_stock.value()
        self.get_checked_products()
        method, list_selected = self.ischecked()
        for item in list_selected:
            update = value + item
            change_stock(update,self.checked_list[i],method)
            i = i+1

        #Clean lists for next search and modification.
        #self.searchbutton_clicked(self.is_checked)
        self.searchbutton_clicked()
        self.clean_lists()

    # Decreasing stock depending on QSpinBox
    def decrease_stock_clicked(self):
        if self.row_count == 0:
            return(0)
        i = 0
        value = self.n_decrease_stock.value()
        self.get_checked_products()
        method, list_selected = self.ischecked()
        for item in list_selected:
            update = int(item) - value
            if update < 0:
                update = 0
            change_stock(update,self.checked_list[i],method)
            i = i+1

        #Clean lists for next search and modification.
#        self.searchbutton_clicked(self.is_checked)
        self.searchbutton_clicked()
        self.clean_lists()


    #Store checked products.
    def get_checked_products(self):
        if self.row_count == 0:
           return(0)
        else:
            for i in range(self.row_count):
                if self.tableWidget.item(i,4).checkState() == Qt.Checked:
                    self.checked_list.append(self.tableWidget.item(i,3).text())
                    self.front_list.append(int(self.tableWidget.item(i,1).text()))
                    self.store_list.append(int(self.tableWidget.item(i,2).text()))


    # Populate table with the product given.
    def searchbutton_clicked(self):#,input_bool):
        self.tableWidget.clearContents()
        self.row_count = 0
        product = show_product(self.lineEdit.text(),1)
        self.tableWidget.setRowCount(0)
        for row_number, row_data, in enumerate(product):
            self.row_count = self.row_count + 1 
            self.tableWidget.insertRow(row_number)
            for column_number, data in enumerate(row_data):
                if type(data) == float:
                    data = int(data)
                item = QTableWidgetItem(str(data))
                item.setTextAlignment(Qt.AlignCenter)
                font = QtGui.QFont()
                font.setPointSize(18)
                item.setFont(font)
                self.tableWidget.setItem(row_number,column_number,item)
            #Create CheckBox 
            check_box_item = QTableWidgetItem()
#            if input_bool== True:
#                check_box_item.setCheckState(Qt.Checked)
#            else:    
            check_box_item.setCheckState(Qt.Unchecked)
            check_box_item.setText("Seleccionar")
            #check_box_item.setTextAlignment(Qt.AlignLeft)
            # Add CheckBox in the last column in every row
            self.tableWidget.setItem(row_number,4,check_box_item)
        self.tableWidget.resizeColumnsToContents()

    def retranslateUi(self, StockWindow):
        _translate = QtCore.QCoreApplication.translate
        StockWindow.setWindowTitle(_translate("StockWindow", "Stock"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("StockWindow", "Nombre"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("StockWindow", "Stock en mostrador"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("StockWindow", "Stock en deposito"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("StockWindow", "Codigo de Barras"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("StockWindow", "Modificar"))
        self.searchbutton.setText(_translate("StockWindow", "Buscar"))
        self.one_to_storage.setText(_translate("StockWindow", "Subir producto al deposito"))
        self.increase_stock.setText(_translate("StockWindow", "Aumentar stock"))
        self.checkBox.setText(_translate("StockWindow", "En mostrador"))
        self.one_to_front.setText(_translate("StockWindow", "Bajar producto del deposito"))
        self.Decrease_stock.setText(_translate("StockWindow", "Disminuir stock"))
        self.checkBox_2.setText(_translate("StockWindow", "En mostrador"))
        self.close_stock_window.setText(_translate("StockWindow", "Cerrar"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    StockWindow = QtWidgets.QMainWindow()
    ui = Ui_StockWindow()
    ui.setupUi(StockWindow)
    StockWindow.show()
    sys.exit(app.exec_())
