# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'modifyproducts2.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import xlrd
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from db_handler import *
from modifyproducts import Ui_ModifyWindow

class ModifyWindow(QtWidgets.QMainWindow, Ui_ModifyWindow):
    def __init__(self, *args, obj=None, **kwargs):
        super(ModifyWindow, self).__init__(*args, **kwargs)
        self.setupUi(self)
        self.row_count = 0
        self.barcode_list = []
        self.add_prod_row_count = 0
        self.product_list = []
        self.file_name = ""
  
        self.validate_int()
        self.validate_string()
        self.validate_barcode()

        # Activation for save_button in add_prod.
        self.save_button.clicked.connect(self.save_button_clicked)

        # Activation for searchbutton_modify
        self.searchbutton_modify.clicked.connect(self.searchbutton_modify_clicked)

        #Save modifications button. (Wrong name)
        self.load_button_modify.clicked.connect(self.load_button_modify_clicked)

        # Activation for searchbutton_delete
        self.searchbutton_delete.clicked.connect(self.searchbutton_delete_clicked)

        # Activation deletebutton
        self.deletebutton.clicked.connect(self.deletebutton_clicked)

        # Activation for browse
        self.browse.clicked.connect(self.browse_clicked)

        # Activation for delete_modify_save
        self.load_delete_modify.clicked.connect(self.load_delete_modify_clicked)


# Funtions Handlers

    def get_checked_products(self):
        if self.row_count == 0:
           return(0)
        else:
            for i in range(self.row_count):
                if self.tableWidget_delete.item(i,2).checkState() == Qt.Checked:
                    self.barcode_list.append(int(self.tableWidget_delete.item(i,1).text()))
                    

    def validate_int(self):
        regex = QRegExp(r'[0-9]+')
        int_validator = QRegExpValidator(regex)
        self.barcode.setValidator(int_validator)
        self.price.setValidator(int_validator)
        self.stored_stock.setValidator(int_validator)
        self.front_stock.setValidator(int_validator)
        self.price_modify.setValidator(int_validator)
        self.front_stock_modify.setValidator(int_validator)
        self.stored_stock_modify.setValidator(int_validator)
        self.barcode_modify.setValidator(int_validator)

    def validate_barcode(self):
        regex = QRegExp(r'[0-9.]+')
        int_validator = QRegExpValidator(regex)
        self.searchbar_modify.setValidator(int_validator)

    def converte_validation_for_modify(self):
        regex = QRegExp("^[a-zA-Z0-9_.-, ]*$")
        str_validator = QRegExpValidator(regex)
        self.name_modify.setValidator(str_validator)
        self.price_modify.setValidator(str_validator)
        self.front_stock_modify.setValidator(str_validator)
        self.stored_stock_modify.setValidator(str_validator)
        self.barcode_modify.setValidator(str_validator)


    #Prevent user to inser numbers in
    def validate_string(self):
        regex = QRegExp("^[a-zA-Z0-9_.-, ]*$")
        str_validator = QRegExpValidator(regex)
        self.name.setValidator(str_validator)
        self.name_modify.setValidator(str_validator)


    #Empty Qlines in front end
    # Method = 0, for Qlines in modification tab
    # Method = 1, for Qlines in add tab
    def empty_Qline(self,method):
        if(method == 0):
            self.name_modify.clear()
            self.front_stock_modify.clear()
            self.stored_stock_modify.clear()
            self.price_modify.clear()
            self.barcode_modify.clear()
            self.searchbar_modify.clear()
        else:
            self.name.clear()
            self.price.clear()
            self.front_stock.clear()
            self.stored_stock.clear()
            self.barcode.clear()
    

    def send_search_to_QLineEdit(self,value):
        self.converte_validation_for_modify()
        self.name_modify.insert(str(value[0][0]))
        self.price_modify.insert(str(value[0][1]))
        self.front_stock_modify.insert(str(int(value[0][2])))
        self.stored_stock_modify.insert(str(int(value[0][3])))
        self.barcode_modify.insert(str(int(value[0][4])))
        self.validate_int()

    #Check QLines from modify and add product not empty when trying to save changes
    def add_QLineEdit_not_empty(self):
        if (self.name.text() != "" and self.stored_stock.text() != "" and
            self.front_stock.text() != "" and self.price.text() != "" and
            self.barcode.text() != ""):
            return(True)

    def modify_QLineEdit_not_empty(self):
        if (self.name_modify.text() != "" and self.stored_stock_modify.text() != "" and
            self.front_stock_modify.text() != "" and self.price_modify.text() != "" and
            self.barcode_modify.text() != ""):
            return(True)

    def send_data_to_QListWidget(self, method, isdelet,psum):
#        print(self.product_list)
        item = QListWidgetItem()
        if(isdelet):
            item.setText("Nombre:  " + str(self.product_list[0]) + "             Codigo de Barras:  " + str(self.product_list[1]))

        else:
            item.setText("Nombre:  " + str(self.product_list[0]) + "             Precio:  " + str(self.product_list[1]) +
                        "              Stock en Mostrador:  " + str(self.product_list[2]) + 
                        "             Stock en Deposito:  " +str(self.product_list[3]) + 
                        "             Codigo de Barras:  " + str(int(self.product_list[4])))
        font = QtGui.QFont()
        font.setPointSize(16)
        item.setFont(font)
        if method == 1:
            item.setIcon(QIcon("./imagenes/greentick.png"))
        else:
            item.setIcon(QIcon("./imagenes/redcross.png"))
        
        self.progress_bar_sum(psum)
        self.listWidget_load_modify_delete.addItem(item)




    #Mira si la celda esta vacia, si esta vacia no agrega nada y avisa con "empty" en True.
    def append_value_to_list(self,products,i,j):
        accepted = True
        cell = products.cell(i,j)
        if cell.ctype == xlrd.XL_CELL_EMPTY:
            self.product_list.append("VALOR NO INGRESADO")
            accepted = False

        elif(j!=0):
            try:
                float(products.cell_value(i,j))
            except:
                self.product_list.append("VALOR NO ES UN NUMERO")
                accepted = False
            else:
                self.product_list.append(products.cell_value(i,j))

        else:
            self.product_list.append(products.cell_value(i,j))
#        print("accepted es {}".format(accepted) )
        return(accepted)



    def progress_bar_sum(self,value):
        self.progressBar.setValue(value)
#----------------------------------------------------------------------------------------------------------

# button Conectors:


    def save_button_clicked(self):
        if(self.add_QLineEdit_not_empty() != True):
            return(0)
        column_index = 0
        self.tableWidget_product_added.insertRow(self.add_prod_row_count)
        data_array = [self.name.text(), self.front_stock.text(), self.stored_stock.text(),
                    self.price.text(), self.barcode.text()]

        added = add_prod(self.name.text(), self.front_stock.text(), self.stored_stock.text(),
                    self.price.text(), self.barcode.text())
       
        if(added):
            for data in data_array:
                if type(data) == float:
                    data = int(data)
                item = QTableWidgetItem(str(data))
                item.setTextAlignment(Qt.AlignCenter)
                font = QtGui.QFont()
                font.setPointSize(18)
                item.setFont(font)
                self.tableWidget_product_added.setItem(self.add_prod_row_count,column_index,item)
                column_index = column_index + 1
            self.add_prod_row_count = self.add_prod_row_count + 1
        self.add_prod_row_count = self.add_prod_row_count + 1
        self.empty_Qline(1)


    def searchbutton_modify_clicked(self):
        if self.searchbar_modify.text() == "":
            return(0)
        product = get_full_product(self.searchbar_modify.text())     
        if product == []:
            return(0)
        self.empty_Qline(0)
        self.send_search_to_QLineEdit(product)
       # update_product(self.name_modify.text(), self.front_stock_modify.text(), self.stored_stock.text(),
       #             self.price.text(), self.barcode.text())

    def load_button_modify_clicked(self):
        if(self.modify_QLineEdit_not_empty() != True):
            return(0)
        update_product(self.name_modify.text(),self.price_modify.text(), self.front_stock_modify.text(),
                            self.stored_stock_modify.text(), self.barcode_modify.text())
        self.empty_Qline(0)


    def searchbutton_delete_clicked(self):
        #self.tableWidget_delete.clearContents()
        product = show_products_delete(self.searchbar_delete.text())
        self.row_count = 0
        self.tableWidget_delete.setRowCount(0)
        for row_number, row_data, in enumerate(product):
            self.row_count = self.row_count + 1 
            self.tableWidget_delete.insertRow(row_number)
            for column_number, data in enumerate(row_data):
                if type(data) == float:
                    data = int(data)
                item = QTableWidgetItem(str(data))
                item.setTextAlignment(Qt.AlignCenter)
                font = QtGui.QFont()
                font.setPointSize(18)
                item.setFont(font)
                self.tableWidget_delete.setItem(row_number,column_number,item)
            #Create CheckBox 
            check_box_item = QTableWidgetItem()
#            if input_bool== True:
#                check_box_item.setCheckState(Qt.Checked)
#            else:    
            check_box_item.setCheckState(Qt.Unchecked)
            check_box_item.setText("Seleccionar")
            #check_box_item.setTextAlignment(Qt.AlignLeft)
            # Add CheckBox in the last column in every row
            font = QtGui.QFont()
            font.setPointSize(18)
            check_box_item.setFont(font)
            self.tableWidget_delete.setItem(row_number,2,check_box_item)
#        self.tableWidget_delete.resizeColumnsToContents()


    def deletebutton_clicked(self,input_value):
        products = self.get_checked_products()
        for item in self.barcode_list:
            delete_product(item)
        self.searchbutton_delete_clicked()
        self.barcode_list = []



    def browse_clicked(self):
        self.file_bar.clear()
        fileName, _ = QtWidgets.QFileDialog.getOpenFileName(self.ModifyWindow, 'Open File', ' ','Excel Files (*.xls)')
        if fileName:
            self.file_bar.insert(fileName)
            self.file_name = fileName
        self.listWidget_load_modify_delete.clear()

    def load_delete_modify_clicked(self):
        if self.file_bar.text() == "":
            return(0)      
        file = xlrd.open_workbook(self.file_name)
        products = file.sheet_by_index(0)
        products_rows = products.nrows
        products_columns = products.ncols
        result = 0
        check = True
        progress_bar_sum = 100/products_rows
        psum = progress_bar_sum
        if(self.radioLoad.isChecked()):
            self.progress_bar_sum(0)
            for i in range(1,products_rows):
                result = 0
                check = True
                for j in range(products_columns):
                    accepted = self.append_value_to_list(products,i,j)
                    check = check and accepted
                if check != False:
                    result = add_prod(self.product_list[0], self.product_list[3], self.product_list[2]
                                        , self.product_list[1],self.product_list[4])
                psum = psum  + progress_bar_sum
                self.send_data_to_QListWidget(result,False,psum)
                self.product_list = []

        elif(self.radiomodify.isChecked()):
            for i in range(1,products_rows):
                result = 0
                check = True
                for j in range(products_columns):
                    result = 0
                    check = True      
                    accepted = self.append_value_to_list(products,i,j)
                    check = check and accepted
                if check != False:
                    result = update_product(self.product_list[0], self.product_list[1], self.product_list[2]
                                        , self.product_list[3],self.product_list[4])
                psum = psum  + progress_bar_sum
                self.send_data_to_QListWidget(result,False,psum)
                self.product_list = []

        elif(self.radioDelete.isChecked()):
            for i in range(1,products_rows):
                result = 0
                check = True
                for j in range(products_columns):    
                    accepted = self.append_value_to_list(products,i,j)
                    check = check and accepted
                if check != False:
                    result = delete_product(self.product_list[1])
                psum = psum  + progress_bar_sum
                self.send_data_to_QListWidget(result, True,psum)
                self.product_list = []
        else:

            return(0)

    print(QtWidgets.QStyleFactory.keys())
#-----------------------------------------------------------------------------------------------------------

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ModifyWindow = ModifyWindow()
    ModifyWindow.show()
    sys.exit(app.exec_())
